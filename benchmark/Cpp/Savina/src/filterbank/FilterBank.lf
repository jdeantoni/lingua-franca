/**
 * Parallelism benchmark from the Savina benchmark suite.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * @author Hannes Klein
 */

/* [[[cog
# This file is a code generator using the python module cog:
# See https://nedbatchelder.com/code/cog/
#
# All instructions for code  generation are in-lined in comments
# like this one. With that you can use this file as a normal source file
# but also to generate code.
# 
# To change the generated code in-line within this file run:
# $ python -m cog -r this-file.lf
# To generate a new file from this file stripping the generator code in the process run:
# $ python -m cog -d -o output-file.lf this-file.lf
#
# Use the command line option -D to specify generator parameters, for example:
# $ python -m cog -r -D parameter=100 this-file.lf
#
# Generator parameters used in this file:
# -D numChannels=8
]]] */
// [[[end]]]

/* [[[cog
  # force existence, type and default values of generator parameters
  if 'numChannels' in globals():
    numChannels = int(numChannels)
  else:
    globals()['numChannels'] = 8
  
  # output the current value of the generator parameters used in the last generation run
  cog.outl(f'// Generated file with the following parameters:')
  cog.outl(f'// numChannels = {numChannels}')
]]] */
// Generated file with the following parameters:
// numChannels = 8
// [[[end]]]

target Cpp {
    build-type : RelWithDebInfo,
    cmake-include: "FilterBank.cmake"
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor ProducerReactor(numChannels:int(8), numSimulations:int(34816), numColumns:int(16384)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state numMessagesSent:int(0);
    
    input inStart:void;
    output outFinished:void;
    input inInitializeStart:void;
    output outInitializeFinished:void;
    
    input inSource:{=Message=};
    output outSource:{=Message=};
    
    logical action sendToSource:{=Message=};
    logical action start:{=Message=};
    
    reaction(inInitializeStart) -> outInitializeFinished {=
        H = new std::vector<std::vector<double>>(numChannels, std::vector<double>(numColumns, 0.0));
        F = new std::vector<std::vector<double>>(numChannels, std::vector<double>(numColumns, 0.0));
        
        for(int j = 0; j < numChannels; ++j) {
            for(int i = 0; i < numChannels; ++i) {
                (*H)[j][i] = (1.0 * i * numChannels) + (1.0 * j * numChannels) + j + i + j + 1;
                (*F)[j][i] = (1.0 * i * j) + (1.0 * j * j) + j + i;
            }
        }
        
        outInitializeFinished.set();
    =}
    
    reaction(inStart) {=
        
        // reset local state
        numMessagesSent = 0;
        
        // start execution
        sendToSource.schedule(Message{BootMsg});
        numMessagesSent += 1;
    =}
    
    reaction(sendToSource) -> outSource {=
        outSource.set(sendToSource.get());
    =}
    
    reaction(inSource) -> sendToSource {=
        
        if(inSource.get()->type == NextMsg) {
            
            if(numMessagesSent >= numSimulations) {
                sendToSource.schedule(Message{ExitMsg}); //TODO directly sending possible?
            } else {
                sendToSource.schedule(Message{BootMsg});
                numMessagesSent += 1;
            }
        }
    =}
}

reactor SourceReactor {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state maxValue:int(1000);
    state current:int(0);
    
    input inProducer:{=Message=};
    output outProducer:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(inProducer) -> outSuccessorValue, outSuccessorControl, outProducer {=
        
        if(inProducer.get()->type == BootMsg) {
            
            outSuccessorValue.set(current);
            current = (current + 1) % maxValue;
            outProducer.set(Message{NextMsg});
            
        } else if(inProducer.get()->type == ExitMsg) {
            
            outSuccessorControl.set(inProducer.get());
            
            // reset local state
            current = 0;
        }
    =}
}

reactor BranchesReactor(numChannels:int(8), numColumns:int(16384)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    /* [[[cog
      cog.outl(f'output[{numChannels}] outBanksValue:{{=double=}};')
      cog.outl(f'output[{numChannels}] outBanksControl:{{=Message=}};')
    ]]] */
    output[8] outBanksValue:{=double=};
    output[8] outBanksControl:{=Message=};
    // [[[end]]]
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    
    reaction(inPredecessorValue) -> outBanksValue {=
        
        for(int i = 0; i < outBanksValue.size(); i++) {
            outBanksValue[i].set(inPredecessorValue.get());
        }
    =}
    
    reaction(inPredecessorControl) -> outBanksControl {=
        
        if(inPredecessorControl.get()->type == ExitMsg) {
            for(int i = 0; i < outBanksValue.size(); i++) {
                outBanksControl[i].set(inPredecessorControl.get());
            }
        }
        // resetting the local state is not necessary
    =}
}

reactor BankReactor(instance:int(-1), numColumns:int(16384)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    delay0 = new DelayReactor(
        sourceId={=std::to_string(instance) + ".1"=},
        delayLength={=numColumns - 1=}
    );
    fir0 = new FirFilterReactor(
        bankIndex=instance,
        sourceId={=std::to_string(instance) + ".1"=},
        peekLength=numColumns,
        coefficients={=&H=}
    );
    sample = new SampleFilterReactor(sampleRate=numColumns);
    delay1 = new DelayReactor(
        sourceId={=std::to_string(instance) + ".2"=},
        delayLength={=numColumns - 1=}
    );
    fir1 = new FirFilterReactor(
        bankIndex=instance,
        sourceId={=std::to_string(instance) + ".2"=},
        peekLength=numColumns,
        coefficients={=&F=}
    );
    tagged = new TaggedForwardReactor(sourceId=instance);
    
    inPredecessorControl -> delay0.inPredecessorControl;
    inPredecessorValue -> delay0.inPredecessorValue;
    
    delay0.outSuccessorControl -> fir0.inPredecessorControl;
    delay0.outSuccessorValue -> fir0.inPredecessorValue;
    fir0.outSuccessorControl -> sample.inPredecessorControl;
    fir0.outSuccessorValue -> sample.inPredecessorValue;
    sample.outSuccessorControl -> delay1.inPredecessorControl;
    sample.outSuccessorValue -> delay1.inPredecessorValue;
    delay1.outSuccessorControl -> fir1.inPredecessorControl;
    delay1.outSuccessorValue -> fir1.inPredecessorValue;
    fir1.outSuccessorControl -> tagged.inPredecessorControl;
    fir1.outSuccessorValue -> tagged.inPredecessorValue;
    
    tagged.outSuccessorControl -> outSuccessorControl;
    tagged.outSuccessorValue -> outSuccessorValue;
}

reactor DelayReactor(sourceId:{=std::string=}({="no source id"=}), delayLength:int(16383)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state myState:{=std::vector<double>=};
    state placeHolder:int(0);
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(startup) {=
        // one time init
        myState = std::vector<double>(delayLength, 0.0);
        placeHolder = 0;
    =}
    
    reaction(inPredecessorValue) -> outSuccessorValue {=
        
        double result = *inPredecessorValue.get();
        outSuccessorValue.set(myState[placeHolder]);
        myState[placeHolder] = result;
        placeHolder = (placeHolder + 1) % delayLength;
    =}
    
    reaction(inPredecessorControl) -> outSuccessorControl {=
        
        outSuccessorControl.set(inPredecessorControl.get());
        
        // reset local state
        myState = std::vector<double>(delayLength, 0.0);
        placeHolder = 0;
    =}
}

reactor FirFilterReactor(
    bankIndex:int(-1),
    sourceId:{=std::string=}({="no source id"=}),
    peekLength:int(16384),
    coefficients:{=std::vector<std::vector<double>>**=}({=nullptr=})) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state data:{=std::vector<double>=};
    state dataIndex:int(0);
    state dataFull:{=bool=}({=false=});
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(startup) {=
        // reset local state
        data = std::vector<double>(peekLength, 0.0);
        dataIndex = 0;
        dataFull = false;
    =}
    
    reaction(inPredecessorValue) -> outSuccessorValue {=
        
        double result = *inPredecessorValue.get();
        data[dataIndex] = result;
        dataIndex += 1;
        
        if(dataIndex == peekLength) {
            dataFull = true;
            dataIndex = 0;
        }
        
        if(dataFull) {
            double sum = 0.0;
            int i = 0;
            while(i < peekLength) {
                sum += data[i] * ((**coefficients)[bankIndex][peekLength - i - 1]);
                i += 1;
            }
            outSuccessorValue.set(sum);
        }
    =}
    
    reaction(inPredecessorControl) -> outSuccessorControl {=
        
        outSuccessorControl.set(inPredecessorControl.get());
        
        // reset local state
        data = std::vector<double>(peekLength, 0.0);
        dataIndex = 0;
        dataFull = false;
    =}
}

reactor SampleFilterReactor(sampleRate:int(16384)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state ZERO_RESULT:double(0.0);
    state samplesReceived:int(0);
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(startup) {=
        // reset local state
        samplesReceived = 0;
    =}
    
    reaction(inPredecessorValue) -> outSuccessorValue {=
        
        if(samplesReceived == 0) {
            outSuccessorValue.set(inPredecessorValue.get());
        } else {
            outSuccessorValue.set(ZERO_RESULT);
        }
        samplesReceived = (samplesReceived + 1) % sampleRate;
    =}
    
    reaction(inPredecessorControl) -> outSuccessorControl {=
        
        outSuccessorControl.set(inPredecessorControl.get());
        
        // reset local state
        samplesReceived = 0;
    =}
}

//FIXME this reactor does nothing in the reactor model. Because messages are tagged by the input
// port they arrive through.
reactor TaggedForwardReactor(sourceId:int(-1)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(inPredecessorValue) -> outSuccessorValue {=
        
        double result = *inPredecessorValue.get();
        outSuccessorValue.set(result);
    =}
    
    reaction(inPredecessorControl) -> outSuccessorControl {=
        
        outSuccessorControl.set(inPredecessorControl.get());
        
        // reset local state
    =}
}

reactor IntegratorReactor(numChannels:int(8)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    state data:{=std::vector<std::map<int,double>>=};
    state exitsReceived:int(0);
    
    /* [[[cog
      cog.outl(f'input[{numChannels}] inPredecessorsValue:{{=double=}};')
      cog.outl(f'input[{numChannels}] inPredecessorsControl:{{=Message=}};')
    ]]] */
    input[8] inPredecessorsValue:{=double=};
    input[8] inPredecessorsControl:{=Message=};
    // [[[end]]]
    output outSuccessorCollection:{=std::vector<double>=};
    output outSuccessorControl:{=Message=};
    
    reaction(startup) {=
        // reset local state
        data = std::vector<std::map<int,double>>();
        exitsReceived = 0;
    =}
    
    reaction(inPredecessorsValue) -> outSuccessorCollection {=
        
        for(int i = 0; i < inPredecessorsValue.size(); ++i) {
            if(inPredecessorsValue[i].is_present()) {
                
                int sourceId = i;
                double result = *inPredecessorsValue[i].get();
                int dataSize = data.size();
                bool processed = false;
                int i = 0;
                
                while(i < dataSize) {
                    std::map<int,double>& loopMap = data[i];
                    if(loopMap.find(sourceId) == end(loopMap)) {
                        loopMap.emplace(sourceId, result);
                        processed = true;
                        i = dataSize;
                    }
                    i += 1;
                }
                
                if(!processed) {
                    data.emplace_back();
                    data.back().emplace(sourceId, result);
                }
                
                auto& firstMap = data[0];
                if(firstMap.size() == numChannels) {
                    auto collection = reactor::make_mutable_value<std::vector<double>>();
                    collection->reserve(firstMap.size());
                    for(auto& val: firstMap) {
                        collection->push_back(val.second);
                    }
                    outSuccessorCollection.set(reactor::ImmutableValuePtr<std::vector<double>>(std::move(collection)));
                    data.erase(begin(data));
                }
            }
        }
    =}
    
    reaction(inPredecessorsControl) -> outSuccessorControl {=
        
        for(int i = 0; i < inPredecessorsControl.size(); ++i) {
            if(inPredecessorsControl[i].is_present()) {
                exitsReceived += 1;
            }
        }
        if(exitsReceived == numChannels) {
            outSuccessorControl.set(Message{ExitMsg});
            // reset local state
            data = std::vector<std::map<int,double>>();
            exitsReceived = 0;
        }
    =}
}

reactor CombineReactor {
    
    public preamble {=
        #include "FilterBankCommon.hh"
    =}
    
    input inPredecessorCollection:{=std::vector<double>=};
    input inPredecessorControl:{=Message=};
    output outSuccessorValue:{=double=};
    output outSuccessorControl:{=Message=};
    
    reaction(inPredecessorCollection) -> outSuccessorValue {=
        
        double sum = 0;
        const std::vector<double>& result = *inPredecessorCollection.get();
        for(const auto loopValue: result) {
            sum += loopValue;
        }
        outSuccessorValue.set(sum);
    =}
    
    reaction(inPredecessorControl) -> outSuccessorControl {=
        
        outSuccessorControl.set(inPredecessorControl.get());
        
        // reset local state
    =}
}

reactor SinkReactor(printRate:int(100)) {
    
    public preamble {=
        #include "FilterBankCommon.hh"
        #include "reactor-cpp/logging.hh"
    =}
    
    state count:int(0);
    
    output outFinished:void;
    
    input inPredecessorValue:{=double=};
    input inPredecessorControl:{=Message=};
    
    reaction(inPredecessorValue) {=
        double result = *inPredecessorValue.get();
        
        bool debug = false;
        if(debug && (count == 0)) {
            reactor::log::Info() << "SinkActor: result = " << result;
        }
        
        count = (count + 1) % printRate;
    =}
    
    reaction(inPredecessorControl) -> outFinished {=
        outFinished.set();
        // reset local state
    =}
}

main reactor (numIterations:int(12), numSimulations:int(34816), numColumns:int(16384)) {
    
    /* [[[cog
      cog.outl(f'producer = new ProducerReactor(numSimulations=numSimulations, numChannels={numChannels}, numColumns=numColumns);')
    ]]] */
    producer = new ProducerReactor(numSimulations=numSimulations, numChannels=8, numColumns=numColumns);
    // [[[end]]]
    runner = new BenchmarkRunner(numIterations=numIterations, useInit=true);
    sink = new SinkReactor(printRate=100);
    
    runner.outInitializeStart -> producer.inInitializeStart;
    producer.outInitializeFinished -> runner.inInitializeFinish;
    
    runner.outIterationStart -> producer.inStart;
    sink.outFinished -> runner.inIterationFinish;
    
    reaction(startup) -> runner.inStart {=
        printBenchmarkInfo("FilterBankBenchmark");
        /* [[[cog
          cog.outl(f'printArgs("numIterations", numIterations, "numSimulations", numSimulations, "numColumns", numColumns, "numChannels", {numChannels});')
        ]]] */
        printArgs("numIterations", numIterations, "numSimulations", numSimulations, "numColumns", numColumns, "numChannels", 8);
        /// [[[end]]]
        printSystemInfo();
        runner.inStart.set();
    =}
    
    combine = new CombineReactor();
    source = new SourceReactor();
    
    /* [[[cog
      cog.outl(f'integrator = new IntegratorReactor(numChannels={numChannels});')
      cog.outl(f'branches = new BranchesReactor(numChannels={numChannels}, numColumns=numColumns);')
      cog.outl(f'banks = new[{numChannels}] BankReactor(numColumns=numColumns);')
    ]]] */
    integrator = new IntegratorReactor(numChannels=8);
    branches = new BranchesReactor(numChannels=8, numColumns=numColumns);
    banks = new[8] BankReactor(numColumns=numColumns);
    // [[[end]]]
    
    producer.outSource -> source.inProducer;
    source.outProducer -> producer.inSource;
    source.outSuccessorControl -> branches.inPredecessorControl;
    source.outSuccessorValue -> branches.inPredecessorValue;
    branches.outBanksControl -> banks.inPredecessorControl;
    branches.outBanksValue -> banks.inPredecessorValue;
    banks.outSuccessorControl -> integrator.inPredecessorsControl;
    banks.outSuccessorValue -> integrator.inPredecessorsValue;
    integrator.outSuccessorControl -> combine.inPredecessorControl;
    integrator.outSuccessorCollection -> combine.inPredecessorCollection;
    combine.outSuccessorControl -> sink.inPredecessorControl;
    combine.outSuccessorValue -> sink.inPredecessorValue;
}
